diff --git a/Calculator-Core/BooleanOperator.java b/Calculator-Core/BooleanOperator.java
index cde296b..dc2c0b2 100644
--- a/Calculator-Core/BooleanOperator.java
+++ b/Calculator-Core/BooleanOperator.java
@@ -3,32 +3,38 @@ class BooleanOperator {
      * Add a and b.
      */
     static double add(double a, double b) {
-        return a + b;
+        // As written, this method will always return 42.
+        // Modify this method to return the result of adding a and b.
+        return 42;
     }
 
     /**
      * Subtract b from a.
      */
     static double subtract(double a, double b) {
-        return a - b;
+        // As written, this method will always return 42.
+        // Modify this method to return the result of subtracting b from a.
+        return 42;
     }
 
     /**
      * Multiply a and b.
      */
     static double multiply(double a, double b) {
-        return a * b;
+        // As written, this method will always return 42.
+        // Modify this method to return the result of multiplying a and b.
+        return 42;
     }
 
     /**
      * Divide a by b.
      */
     static double divide(double a, double b) {
-        if (b == 0) {
-            return 0;
-        }
-
-        return a / b;
+        // As written, this method will always return 42.
+        // Modify this method to return the result of dividing a by b.
+        // CONDITIONAL LOGIC: the calculator will crash if you try to divide by 0.
+        // Prevent this by always returning 0 if b equals 0.
+        return 42;
     }
 
     /**
@@ -42,21 +48,20 @@ class BooleanOperator {
      * Raise a to the power of b when b is an integer.
      */
     static double intPower(double a, int b) {
-        double result = 1;
-        for (int i = 0; i < b; ++i) {
-            result *= a;
-        }
-        return result;
+        // As written, this method will always return 42.
+        // LOOPS: modify this method to return the result of raising a to the power of b WITHOUT using Math.pow.
+        // Hint: use the definition of an exponent.
+        return 42;
     }
 
     /**
      * Return the value of a modulo b.
      */
     static double modulus(double a, double b) {
-        if (b == 0) {
-            return 0;
-        }
-
-        return a % b;
+        // As written, this method will always return 42.
+        // Modify this method to return the value of a modulo b.
+        // CONDITIONAL LOGIC: the calculator will crash if you try to reduce modulo 0.
+        // Prevent this by always returning 0 if b equals 0.
+        return 42;
     }
 }
